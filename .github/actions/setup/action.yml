name: 'nix setup'
description: 'nix setup'

inputs:
  nix-develop-arguments:
    description: 'nix develop arguments'
    type: string
    default: ""

  flake-lock:
    description: 'Path to flake.lock'
    required: true

  # directory:
  #   description: 'Directory to run nix-shell in'
  #   required: true
  #
  # github_token:
  #   description: 'GitHub Token'
  #   required: true
  #
  cache_paths:
    description: 'cache these paths, json array'
    type: string
    default: "[]"

  git_directory:
    description: "git directory"
    default: "./"

outputs:
  image_tag: 
    description: "docker image tag to use"
    value: ${{ steps.output.outputs.image_tag }}

  override_pushed_image: 
    description: "whether override already pushed image"
    value: ${{ steps.output.outputs.override_pushed_image }}


runs:
  using: 'composite'
  steps:
    - name: Install NIX
      uses: DeterminateSystems/nix-installer-action@main

    - name: nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: nix flake check
      uses: DeterminateSystems/flake-checker-action@main
      with:
        flake-lock-path: "${{ inputs.flake-lock }}"

    - name: Nix Develop Action
      uses: nicknovitski/nix-develop@v1.1.0
      with:
        arguments: "${{ inputs.nix-develop-arguments }}"

    # - name: Setup Caches
    #   # if: ${{ inputs.cache_paths.length > 0 }}
    #   uses: actions/cache@v4
    #   env:
    #     cache-name: go-cache-${{ github.repository_id }}
    #   with:
    #     # path: |+
    #     #   ${{ env.GOMODCACHE }}
    #     #   ${{ env.GOCACHE }}
    #     # path: ${{inputs.cache_paths}}
    #     path: ${{inputs.cache_paths}}
    #     key: ${{ runner.os }}-${{github.repository_id}}-api-setup-${{ hashFiles('./api/go.sum', './api/go.mod') }}
    #     save-always: true
    #     restore-keys: |
    #       ${{ runner.os }}-${{github.repository_id}}-api-setup-
    #       ${{ runner.os }}-${{github.repository_id}}-

    # - name: caches pre
    #   shell: bash
    #   run: |+
    #     echo "going to create cache directories"
    #     echo "${{ inputs.cache_paths }}" | xargs -I{} echo "directory is {}"
    #     echo "${{ inputs.cache_paths }}" | xargs -I{} mkdir -p {}
    #     echo "${{ inputs.cache_paths }}" | xargs -I{} ls -al {}
    #
    # - name: Setup Caches
    #   # if: ${{ inputs.cache_paths.length > 0 }}
    #   uses: actions/cache@v4
    #   with:
    #     path: |+
    #       ${{ inputs.cache_paths }}
    #     key: ${{ runner.os }}-${{github.repository_id}}-setup
    #     save-always: true
    #     restore-keys: |
    #       ${{ runner.os }}-${{github.repository_id}}-setup

    # - name: Set up QEMU
    #   # if: ${{ inputs.enable_docker == 'true' }}
    #   uses: docker/setup-qemu-action@v3
    #
    # - name: Set up Docker Buildx
    #   # if: ${{ inputs.enable_docker == 'true' }}
    #   uses: docker/setup-buildx-action@v3
    #
    # - name: Log in to the Container registry
    #   uses: docker/login-action@v3
    #   # if: ${{ inputs.enable_docker == 'true' }}
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ inputs.github_token }}

    - name: Create Image Tag from branch name
      id: gitref_branch
      if: startsWith(github.ref, 'refs/heads/release')
      shell: bash
      working-directory: ${{inputs.git_directory}}
      run: |
        set +e
        IMAGE_TAG=${GITHUB_REF#refs/heads/release-}
        echo "$IMAGE_TAG" | grep -i '\-nightly$'
        if [ $? -ne 0 ]; then
          IMAGE_TAG="$IMAGE_TAG-nightly"
        fi
        set -e

        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "override_pushed_image=true" >> $GITHUB_OUTPUT

    - name: Create Image Tag from tag
      if: startsWith(github.ref, 'refs/tags/')
      id: gitref_tag
      working-directory: ${{inputs.git_directory}}
      shell: bash
      run: |
        IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})

        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "override_pushed_image=false" >> $GITHUB_OUTPUT

    - name: Output Image Tag
      id: output
      shell: bash
      working-directory: ${{inputs.git_directory}}
      run: |+
        if [ "${{ steps.gitref_branch.outputs.image_tag }}" != "" ]; then
          echo "image_tag=${{ steps.gitref_branch.outputs.image_tag }}" >> $GITHUB_OUTPUT
          echo "override_pushed_image=${{ steps.gitref_branch.outputs.override_pushed_image }}" >> $GITHUB_OUTPUT
        else
          echo "image_tag=${{ steps.gitref_tag.outputs.image_tag }}" >> $GITHUB_OUTPUT
          echo "override_pushed_image=${{ steps.gitref_tag.outputs.override_pushed_image }}" >> $GITHUB_OUTPUT
        fi
