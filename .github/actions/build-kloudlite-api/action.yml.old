name: 'build kloudlite api action'
description: 'builds kloudlite APIs'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

  save_go_cache:
    description: 'save_go_cache'
    type: boolean
    default: true
    required: false

  directory:
    description: 'cd to this directory'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install NIX
      uses: DeterminateSystems/nix-installer-action@main

    # - name: Cache NIX
    #   uses: DeterminateSystems/magic-nix-cache-action@v2
    # - name: Cache Nix store
    #   uses: nix-community/cache-nix-action@v5
    #   with:
    #     save-always: true
    #     token: ${{inputs.github_token}}
    #     primary-key: "iac-nix-store-cache"

    - name: nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - shell: bash
      run: |+
        git clone https://github.com/kloudlite/api
        cd api
        git checkout main

    - name: nix flake check
      uses: DeterminateSystems/flake-checker-action@main
      with:
        flake-lock-path: "./api/flake.lock"

    - name: Nix Develop Action
      uses: nicknovitski/nix-develop@v1.1.0
      with:
        arguments: "./api#default"

    - name: go env vars
      if: ${{ inputs.save_go_cache }}
      shell: bash
      run: |+
        echo "GOARCH=$(go env GOARCH)" >> $GITHUB_OUTPUT
        echo "GOCACHE=~/go-cache" >> $GITHUB_OUTPUT
        echo "GOVERSION=$(go env GOVERSION)" >> $GITHUB_OUTPUT

    - name: Setup Golang caches
      if: ${{ inputs.save_go_cache }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go-cache
        key: ${{ runner.os }}-golang-${{ hashFiles('api/go.sum') }}
        save-always: true
        restore-keys: |
          ${{ runner.os }}-golang-api

    - name: Set up QEMU
      # if: ${{ inputs.enable_docker == 'true' }}
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      # if: ${{ inputs.enable_docker == 'true' }}
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      # if: ${{ inputs.enable_docker == 'true' }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    # - name: Create Image Tag from branch name
    #   id: gitref_branch
    #   if: startsWith(github.ref, 'refs/heads/release')
    #   shell: bash
    #   working-directory: ./infrastructure-as-code
    #   run: |
    #     set +e
    #     IMAGE_TAG=${GITHUB_REF#refs/heads/release-}
    #     echo "$IMAGE_TAG" | grep -i '\-nightly$'
    #     if [ $? -ne 0 ]; then
    #       IMAGE_TAG="$IMAGE_TAG-nightly"
    #     fi
    #     set -e
    #
    #     echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
    #     echo "override_pushed_image=true" >> $GITHUB_OUTPUT
    #
    # - name: Create Image Tag from tag
    #   if: startsWith(github.ref, 'refs/tags/')
    #   id: gitref_tag
    #   working-directory: ./infrastructure-as-code
    #   shell: bash
    #   run: |
    #     IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})
    #
    #     echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
    #     echo "override_pushed_image=false" >> $GITHUB_OUTPUT
    #
    # - name: Output Image Tag
    #   id: output
    #   shell: bash
    #   working-directory: ./infrastructure-as-code
    #   run: |+
    #     if [ "${{ steps.gitref_branch.outputs.image_tag }}" != "" ]; then
    #       echo "image_tag=${{ steps.gitref_branch.outputs.image_tag }}" >> $GITHUB_OUTPUT
    #       echo "override_pushed_image=${{ steps.gitref_branch.outputs.override_pushed_image }}" >> $GITHUB_OUTPUT
    #     else
    #       echo "image_tag=${{ steps.gitref_tag.outputs.image_tag }}" >> $GITHUB_OUTPUT
    #       echo "override_pushed_image=${{ steps.gitref_tag.outputs.override_pushed_image }}" >> $GITHUB_OUTPUT
    #     fi

    - name: run ls
      shell: bash
      run: |+
        ls -al 
        ls -al ./api

    - name: build container image
      shell: bash
      working-directory: ./api/${{ inputs.directory }}
      run: |+
        task container:build-and-push Image="sample" dockerArgs="--load"
        # task local:build:iac-job Image="sample" cloudprovider=gcp
        # docker build -t sample .

